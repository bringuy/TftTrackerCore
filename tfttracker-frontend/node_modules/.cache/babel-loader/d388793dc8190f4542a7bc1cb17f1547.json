{"ast":null,"code":"const Promise = require('pinkie-promise');\n\nconst exec = require('child_process').exec;\n\nconst temp = require('temp');\n\nconst path = require('path');\n\nconst utils = require('../utils');\n\nconst {\n  readAndUnlinkP,\n  defaultAll\n} = utils;\n\nfunction windowsSnapshot(options = {}) {\n  return new Promise((resolve, reject) => {\n    const displayName = options.screen;\n    const format = options.format || 'jpg';\n    const tmpPath = temp.path({\n      suffix: `.${format}`\n    });\n    const imgPath = path.resolve(options.filename || tmpPath);\n    const displayChoice = displayName ? ` /d \"${displayName}\"` : '';\n    exec('\"' + path.join(__dirname.replace('app.asar', 'app.asar.unpacked'), 'screenCapture_1.3.2.bat') + '\" \"' + imgPath + '\" ' + displayChoice, {\n      cwd: __dirname.replace('app.asar', 'app.asar.unpacked'),\n      windowsHide: true\n    }, (err, stdout) => {\n      if (err) {\n        return reject(err);\n      } else {\n        if (options.filename) {\n          resolve(imgPath);\n        } else {\n          readAndUnlinkP(tmpPath).then(resolve).catch(reject);\n        }\n      }\n    });\n  });\n}\n\nconst EXAMPLE_DISPLAYS_OUTPUT = '\\r\\nC:\\\\Users\\\\devetry\\\\screenshot-desktop\\\\lib\\\\win32>//  2>nul  || \\r\\n\\\\.\\\\DISPLAY1;0;1920;1080;0\\r\\n\\\\.\\\\DISPLAY2;0;3840;1080;1920\\r\\n';\n\nfunction parseDisplaysOutput(output) {\n  const displaysStartPattern = /2>nul {2}\\|\\| /;\n  const {\n    0: match,\n    index\n  } = displaysStartPattern.exec(output);\n  return output.slice(index + match.length).split('\\n').map(s => s.replace(/[\\n\\r]/g, '')).map(s => s.match(/(.*?);(.?\\d+);(.?\\d+);(.?\\d+);(.?\\d+);(.?\\d*\\.?\\d+)/)).filter(s => s).map(m => ({\n    id: m[1],\n    name: m[1],\n    top: +m[2],\n    right: +m[3],\n    bottom: +m[4],\n    left: +m[5],\n    dpiScale: +m[6]\n  })).map(d => Object.assign(d, {\n    height: d.bottom - d.top,\n    width: d.right - d.left\n  }));\n}\n\nfunction listDisplays() {\n  return new Promise((resolve, reject) => {\n    exec('\"' + path.join(__dirname.replace('app.asar', 'app.asar.unpacked'), 'screenCapture_1.3.2.bat') + '\" /list', {\n      cwd: __dirname.replace('app.asar', 'app.asar.unpacked')\n    }, (err, stdout) => {\n      if (err) {\n        return reject(err);\n      }\n\n      resolve(parseDisplaysOutput(stdout));\n    });\n  });\n}\n\nwindowsSnapshot.listDisplays = listDisplays;\nwindowsSnapshot.availableDisplays = listDisplays;\nwindowsSnapshot.parseDisplaysOutput = parseDisplaysOutput;\nwindowsSnapshot.EXAMPLE_DISPLAYS_OUTPUT = EXAMPLE_DISPLAYS_OUTPUT;\n\nwindowsSnapshot.all = () => defaultAll(windowsSnapshot);\n\nmodule.exports = windowsSnapshot;","map":{"version":3,"sources":["C:/Users/Brian/Desktop/TFTracker/TftTrackerCore/tfttracker-frontend/node_modules/screenshot-desktop/lib/win32/index.js"],"names":["Promise","require","exec","temp","path","utils","readAndUnlinkP","defaultAll","windowsSnapshot","options","resolve","reject","displayName","screen","format","tmpPath","suffix","imgPath","filename","displayChoice","join","__dirname","replace","cwd","windowsHide","err","stdout","then","catch","EXAMPLE_DISPLAYS_OUTPUT","parseDisplaysOutput","output","displaysStartPattern","match","index","slice","length","split","map","s","filter","m","id","name","top","right","bottom","left","dpiScale","d","Object","assign","height","width","listDisplays","availableDisplays","all","module","exports"],"mappings":"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","sourcesContent":["const Promise = require('pinkie-promise')\nconst exec = require('child_process').exec\nconst temp = require('temp')\nconst path = require('path')\nconst utils = require('../utils')\n\nconst {\n  readAndUnlinkP,\n  defaultAll\n} = utils\n\nfunction windowsSnapshot (options = {}) {\n  return new Promise((resolve, reject) => {\n    const displayName = options.screen\n    const format = options.format || 'jpg'\n    const tmpPath = temp.path({\n      suffix: `.${format}`\n    })\n    const imgPath = path.resolve(options.filename || tmpPath)\n\n    const displayChoice = displayName ? ` /d \"${displayName}\"` : ''\n\n    exec('\"' + path.join(__dirname.replace('app.asar', 'app.asar.unpacked'), 'screenCapture_1.3.2.bat') + '\" \"' + imgPath + '\" ' + displayChoice, {\n      cwd: __dirname.replace('app.asar', 'app.asar.unpacked'),\n      windowsHide: true\n    }, (err, stdout) => {\n      if (err) {\n        return reject(err)\n      } else {\n        if (options.filename) {\n          resolve(imgPath)\n        } else {\n          readAndUnlinkP(tmpPath)\n            .then(resolve)\n            .catch(reject)\n        }\n      }\n    })\n  })\n}\n\nconst EXAMPLE_DISPLAYS_OUTPUT = '\\r\\nC:\\\\Users\\\\devetry\\\\screenshot-desktop\\\\lib\\\\win32>//  2>nul  || \\r\\n\\\\.\\\\DISPLAY1;0;1920;1080;0\\r\\n\\\\.\\\\DISPLAY2;0;3840;1080;1920\\r\\n'\n\nfunction parseDisplaysOutput (output) {\n  const displaysStartPattern = /2>nul {2}\\|\\| /\n  const {\n    0: match,\n    index\n  } = displaysStartPattern.exec(output)\n  return output.slice(index + match.length)\n    .split('\\n')\n    .map(s => s.replace(/[\\n\\r]/g, ''))\n    .map(s => s.match(/(.*?);(.?\\d+);(.?\\d+);(.?\\d+);(.?\\d+);(.?\\d*\\.?\\d+)/))\n    .filter(s => s)\n    .map(m => ({\n      id: m[1],\n      name: m[1],\n      top: +m[2],\n      right: +m[3],\n      bottom: +m[4],\n      left: +m[5],\n      dpiScale: +m[6]\n    }))\n    .map(d => Object.assign(d, {\n      height: d.bottom - d.top,\n      width: d.right - d.left\n    }))\n}\n\nfunction listDisplays () {\n  return new Promise((resolve, reject) => {\n    exec(\n      '\"' + path.join(__dirname.replace('app.asar', 'app.asar.unpacked'), 'screenCapture_1.3.2.bat') + '\" /list', {\n        cwd: __dirname.replace('app.asar', 'app.asar.unpacked')\n      },\n      (err, stdout) => {\n        if (err) {\n          return reject(err)\n        }\n        resolve(parseDisplaysOutput(stdout))\n      })\n  })\n}\n\nwindowsSnapshot.listDisplays = listDisplays\nwindowsSnapshot.availableDisplays = listDisplays\nwindowsSnapshot.parseDisplaysOutput = parseDisplaysOutput\nwindowsSnapshot.EXAMPLE_DISPLAYS_OUTPUT = EXAMPLE_DISPLAYS_OUTPUT\nwindowsSnapshot.all = () => defaultAll(windowsSnapshot)\n\nmodule.exports = windowsSnapshot\n"]},"metadata":{},"sourceType":"script"}