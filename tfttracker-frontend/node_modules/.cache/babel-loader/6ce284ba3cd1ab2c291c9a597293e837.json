{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Brian\\\\Desktop\\\\TFTracker\\\\TftTrackerCore\\\\tfttracker-frontend\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport { getSidebarPlayers, updateSidebarPlayers, getEnemyAgainst } from './services/api-calls';\nimport { getScreenshot } from './services/screenshot'; //serializer should send:\n//NEED TO ADD A LOADER!\n\nconst App = () => {\n  _s();\n\n  //these are variables to get from api calls and to send to other api calls\n  const [enemyTracker, setEnemyTracker] = useState([]);\n  const [enemyPlayed, setEnemyPlayed] = useState([]); //this is returned from updateSidebarPlayers, will use to display 1-4 enemies to watchout for \n\n  const [enemiesToWatch, setEnemiesToWatch] = useState([]);\n  useEffect(() => {\n    getScreenshot();\n  }, []);\n  window.addEventListener('keydown', event => {\n    console.log(event.leu);\n  });\n\n  const findAndUpdateEnemy = () => {\n    getEnemyAgainst().then(result => {\n      setEnemyTracker(result.enemyTracker);\n      setEnemyPlayed(result.enemyTracker);\n      updateSidebarPlayers(enemyPlayed, enemyTracker).then(result => {});\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    onKeyDown: handleKeyDown,\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"test-button\",\n      type: \"text\",\n      onKeyDown: handleKeyDown\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"ZcSiHe6OJK2RSJdmk1QUgfDgYNE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Brian/Desktop/TFTracker/TftTrackerCore/tfttracker-frontend/src/App.js"],"names":["useEffect","useState","getSidebarPlayers","updateSidebarPlayers","getEnemyAgainst","getScreenshot","App","enemyTracker","setEnemyTracker","enemyPlayed","setEnemyPlayed","enemiesToWatch","setEnemiesToWatch","window","addEventListener","event","console","log","leu","findAndUpdateEnemy","then","result","handleKeyDown"],"mappings":";;;;;AAAA,OAAO,WAAP;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,iBAAT,EAA4BC,oBAA5B,EAAkDC,eAAlD,QAAyE,sBAAzE;AACA,SAASC,aAAT,QAA8B,uBAA9B,C,CAEA;AAEA;;AACA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAEhB;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,EAAD,CAA9C,CAJgB,CAKhB;;AACA,QAAM,CAACU,cAAD,EAAiBC,iBAAjB,IAAsCX,QAAQ,CAAC,EAAD,CAApD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,aAAa;AACd,GAFQ,EAEN,EAFM,CAAT;AAIAQ,EAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAoCC,KAAD,IAAW;AAC5CC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,GAAlB;AACD,GAFD;;AAIA,QAAMC,kBAAkB,GAAG,MAAM;AAC/Bf,IAAAA,eAAe,GAAGgB,IAAlB,CACGC,MAAD,IAAY;AACVb,MAAAA,eAAe,CAACa,MAAM,CAACd,YAAR,CAAf;AACAG,MAAAA,cAAc,CAACW,MAAM,CAACd,YAAR,CAAd;AACAJ,MAAAA,oBAAoB,CAACM,WAAD,EAAcF,YAAd,CAApB,CAAgDa,IAAhD,CACGC,MAAD,IAAY,CAEX,CAHH;AAKD,KATH;AAWD,GAZD;;AAcA,sBACE;AAAK,IAAA,SAAS,EAAG,eAAjB;AAAiC,IAAA,SAAS,EAAEC,aAA5C;AAAA,2BACE;AAAO,MAAA,SAAS,EAAC,aAAjB;AAA+B,MAAA,IAAI,EAAC,MAApC;AAA2C,MAAA,SAAS,EAAEA;AAAtD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAnCD;;GAAMhB,G;;KAAAA,G;AAqCN,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react'\nimport { getSidebarPlayers, updateSidebarPlayers, getEnemyAgainst } from './services/api-calls'\nimport { getScreenshot } from './services/screenshot'\n\n//serializer should send:\n\n//NEED TO ADD A LOADER!\nconst App = () => {\n\n  //these are variables to get from api calls and to send to other api calls\n  const [enemyTracker, setEnemyTracker] = useState([])\n  const [enemyPlayed, setEnemyPlayed] = useState([])\n  //this is returned from updateSidebarPlayers, will use to display 1-4 enemies to watchout for \n  const [enemiesToWatch, setEnemiesToWatch] = useState([])\n\n  useEffect(() => {\n    getScreenshot()\n  }, [])\n\n  window.addEventListener('keydown', (event) => {\n    console.log(event.leu)\n  })\n\n  const findAndUpdateEnemy = () => {\n    getEnemyAgainst().then(\n      (result) => {\n        setEnemyTracker(result.enemyTracker)\n        setEnemyPlayed(result.enemyTracker)\n        updateSidebarPlayers(enemyPlayed, enemyTracker).then(\n          (result) => {\n\n          }\n        )\n      }\n    )\n  }\n\n  return (\n    <div className = 'app-container' onKeyDown={handleKeyDown} >\n      <input className='test-button' type=\"text\" onKeyDown={handleKeyDown} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}