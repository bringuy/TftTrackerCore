{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Brian\\\\Desktop\\\\TFTracker\\\\TftTrackerCore\\\\tfttracker-frontend\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport { getSidebarPlayers, updateSidebarPlayers, getEnemyAgainst } from './services/api-calls'; //serializer should send:\n//ADD LOADER WHEN API IS BEING CALLED\n\nconst App = () => {\n  _s();\n\n  const [initalEntry, setIntialEntry] = useState(true); //these are variables to get from api calls and to send to other api calls\n\n  const [enemyTracker, setEnemyTracker] = useState([]); //this is returned from updateSidebarPlayers, will use to display 1-4 enemies to watchout for \n\n  const [enemiesToWatch, setEnemiesToWatch] = useState([]); //ALT KEY: GETSIDEBARPLAYERS() INITAL FUNCTION\n  //ENTER KEY: GETENEMYAGAINST() => UPDATESIDEBARPLAYERS\n\n  window.addEventListener('keydown', event => {\n    if (event.key === 'Enter') {\n      if (initialEntry === true) {\n        initalizeEnemies();\n        setIntialEntry();\n      } else {\n        findAndUpdateEnemy();\n      }\n    }\n  });\n\n  const initalizeEnemies = () => {\n    getSidebarPlayers().then();\n  };\n\n  const findAndUpdateEnemy = () => {\n    getEnemyAgainst().then(result => {\n      let enemyPlayed = result.enemyPlayed;\n      updateSidebarPlayers(enemyPlayed, enemyTracker).then(result => {\n        setEnemyTracker(result.playingOrder);\n        setEnemiesToWatch(result.enemies);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: enemiesToWatch.map(enemy => {\n      /*#__PURE__*/\n      _jsxDEV(\"div\", {\n        children: enemy.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"kXkib9qmkTXwKPI24PY+FM266uY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Brian/Desktop/TFTracker/TftTrackerCore/tfttracker-frontend/src/App.js"],"names":["useEffect","useState","getSidebarPlayers","updateSidebarPlayers","getEnemyAgainst","App","initalEntry","setIntialEntry","enemyTracker","setEnemyTracker","enemiesToWatch","setEnemiesToWatch","window","addEventListener","event","key","initialEntry","initalizeEnemies","findAndUpdateEnemy","then","result","enemyPlayed","playingOrder","enemies","map","enemy","name"],"mappings":";;;;;AAAA,OAAO,WAAP;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,iBAAT,EAA4BC,oBAA5B,EAAkDC,eAAlD,QAAyE,sBAAzE,C,CAEA;AAEA;;AACA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAEhB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,IAAD,CAA9C,CAFgB,CAGhB;;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,EAAD,CAAhD,CAJgB,CAKhB;;AACA,QAAM,CAACS,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAAC,EAAD,CAApD,CANgB,CAQhB;AACA;;AACAW,EAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAoCC,KAAD,IAAW;AAC5C,QAAIA,KAAK,CAACC,GAAN,KAAc,OAAlB,EAA2B;AACzB,UAAIC,YAAY,KAAK,IAArB,EAA2B;AACzBC,QAAAA,gBAAgB;AAChBV,QAAAA,cAAc;AACf,OAHD,MAIK;AACHW,QAAAA,kBAAkB;AACnB;AACF;AACF,GAVD;;AAYA,QAAMD,gBAAgB,GAAG,MAAM;AAC7Bf,IAAAA,iBAAiB,GAAGiB,IAApB;AACD,GAFD;;AAIA,QAAMD,kBAAkB,GAAG,MAAM;AAC/Bd,IAAAA,eAAe,GAAGe,IAAlB,CACGC,MAAD,IAAY;AACV,UAAIC,WAAW,GAAGD,MAAM,CAACC,WAAzB;AACAlB,MAAAA,oBAAoB,CAACkB,WAAD,EAAcb,YAAd,CAApB,CAAgDW,IAAhD,CACGC,MAAD,IAAY;AACVX,QAAAA,eAAe,CAACW,MAAM,CAACE,YAAR,CAAf;AACAX,QAAAA,iBAAiB,CAACS,MAAM,CAACG,OAAR,CAAjB;AACD,OAJH;AAMD,KATH;AAWD,GAZD;;AAcA,sBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,cAEIb,cAAc,CAACc,GAAf,CAAmBC,KAAK,IAAI;AAC1B;AAAA;AAAA,kBAAMA,KAAK,CAACC;AAAZ;AAAA;AAAA;AAAA;AAAA;AACD,KAFD;AAFJ;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAjDD;;GAAMrB,G;;KAAAA,G;AAmDN,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react'\nimport { getSidebarPlayers, updateSidebarPlayers, getEnemyAgainst } from './services/api-calls'\n\n//serializer should send:\n\n//ADD LOADER WHEN API IS BEING CALLED\nconst App = () => {\n\n  const [initalEntry, setIntialEntry] = useState(true)\n  //these are variables to get from api calls and to send to other api calls\n  const [enemyTracker, setEnemyTracker] = useState([])\n  //this is returned from updateSidebarPlayers, will use to display 1-4 enemies to watchout for \n  const [enemiesToWatch, setEnemiesToWatch] = useState([])\n\n  //ALT KEY: GETSIDEBARPLAYERS() INITAL FUNCTION\n  //ENTER KEY: GETENEMYAGAINST() => UPDATESIDEBARPLAYERS\n  window.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      if (initialEntry === true) {\n        initalizeEnemies()\n        setIntialEntry()\n      }\n      else {\n        findAndUpdateEnemy()\n      }\n    }\n  })\n\n  const initalizeEnemies = () => {\n    getSidebarPlayers().then()\n  }\n\n  const findAndUpdateEnemy = () => {\n    getEnemyAgainst().then(\n      (result) => {\n        let enemyPlayed = result.enemyPlayed\n        updateSidebarPlayers(enemyPlayed, enemyTracker).then(\n          (result) => {\n            setEnemyTracker(result.playingOrder)\n            setEnemiesToWatch(result.enemies)\n          }\n        )\n      }\n    )\n  }\n\n  return (\n    <div className='app-container'>\n      {\n        enemiesToWatch.map(enemy => {\n          <div>{enemy.name}</div>\n        })\n      }\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}