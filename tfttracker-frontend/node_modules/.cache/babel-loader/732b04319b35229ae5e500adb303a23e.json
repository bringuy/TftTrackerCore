{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Brian\\\\Desktop\\\\TFTracker\\\\TftTrackerCore\\\\tfttracker-frontend\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport { getSidebarPlayers, updateSidebarPlayers, getEnemyAgainst } from './services/api-calls';\nimport { getScreenshot } from './services/screenshot'; //serializer should send:\n\nconst App = () => {\n  _s();\n\n  //these are variables to get from api calls and to send to other api calls\n  const [enemyTracker, setEnemyTracker] = useState([]);\n  const [enemyPlayed, setEnemyPlayed] = useState([]); //this is returned from updateSidebarPlayers, will use to display 1-4 enemies to watchout for \n\n  const [enemiesToWatch, setEnemiesToWatch] = useState([]);\n\n  const handleKeyDown = event => {\n    if (event.key === 'Alt') {\n      getScreenshot();\n      getSidebarPlayers().then(); //only need to initalize database\n    } else if (event.key === 'Enter') {\n      getScreenshot();\n      findAndUpdateEnemy();\n    }\n  };\n\n  const findAndUpdateEnemy = () => {\n    getEnemyAgainst().then(result => {\n      setEnemyTracker(result.enemyTracker);\n      setEnemyPlayed(result.enemyTracker);\n      updateSidebarPlayers(enemyPlayed, enemyTracker).then(result => {});\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"test-button\",\n      type: \"text\",\n      onKeyDown: handleKeyDown\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"3nR6Bk93N6PgLzG5kvVPa/vPFvQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Brian/Desktop/TFTracker/TftTrackerCore/tfttracker-frontend/src/App.js"],"names":["useEffect","useState","getSidebarPlayers","updateSidebarPlayers","getEnemyAgainst","getScreenshot","App","enemyTracker","setEnemyTracker","enemyPlayed","setEnemyPlayed","enemiesToWatch","setEnemiesToWatch","handleKeyDown","event","key","then","findAndUpdateEnemy","result"],"mappings":";;;;;AAAA,OAAO,WAAP;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,iBAAT,EAA4BC,oBAA5B,EAAkDC,eAAlD,QAAyE,sBAAzE;AACA,SAASC,aAAT,QAA8B,uBAA9B,C,CAEA;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAEhB;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,EAAD,CAA9C,CAJgB,CAKhB;;AACA,QAAM,CAACU,cAAD,EAAiBC,iBAAjB,IAAsCX,QAAQ,CAAC,EAAD,CAApD;;AAEA,QAAMY,aAAa,GAAIC,KAAD,IAAW;AAC/B,QAAIA,KAAK,CAACC,GAAN,KAAc,KAAlB,EAAyB;AACvBV,MAAAA,aAAa;AACbH,MAAAA,iBAAiB,GAAGc,IAApB,GAFuB,CAEI;AAC5B,KAHD,MAIK,IAAIF,KAAK,CAACC,GAAN,KAAc,OAAlB,EAA2B;AAC9BV,MAAAA,aAAa;AACbY,MAAAA,kBAAkB;AACnB;AACF,GATD;;AAWA,QAAMA,kBAAkB,GAAG,MAAM;AAC/Bb,IAAAA,eAAe,GAAGY,IAAlB,CACGE,MAAD,IAAY;AACVV,MAAAA,eAAe,CAACU,MAAM,CAACX,YAAR,CAAf;AACAG,MAAAA,cAAc,CAACQ,MAAM,CAACX,YAAR,CAAd;AACAJ,MAAAA,oBAAoB,CAACM,WAAD,EAAcF,YAAd,CAApB,CAAgDS,IAAhD,CACKE,MAAD,IAAY,CAEX,CAHL;AAKD,KATH;AAWD,GAZD;;AAcA,sBACE;AAAA,2BACE;AAAO,MAAA,SAAS,EAAC,aAAjB;AAA+B,MAAA,IAAI,EAAC,MAApC;AAA2C,MAAA,SAAS,EAAEL;AAAtD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAtCD;;GAAMP,G;;KAAAA,G;AAwCN,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react'\nimport { getSidebarPlayers, updateSidebarPlayers, getEnemyAgainst } from './services/api-calls'\nimport { getScreenshot } from './services/screenshot'\n\n//serializer should send:\n\nconst App = () => {\n\n  //these are variables to get from api calls and to send to other api calls\n  const [enemyTracker, setEnemyTracker] = useState([])\n  const [enemyPlayed, setEnemyPlayed] = useState([])\n  //this is returned from updateSidebarPlayers, will use to display 1-4 enemies to watchout for \n  const [enemiesToWatch, setEnemiesToWatch] = useState([])\n\n  const handleKeyDown = (event) => {\n    if (event.key === 'Alt') {\n      getScreenshot()\n      getSidebarPlayers().then() //only need to initalize database\n    }\n    else if (event.key === 'Enter') {\n      getScreenshot()\n      findAndUpdateEnemy()\n    }\n  }\n\n  const findAndUpdateEnemy = () => {\n    getEnemyAgainst().then(\n      (result) => {\n        setEnemyTracker(result.enemyTracker)\n        setEnemyPlayed(result.enemyTracker)\n        updateSidebarPlayers(enemyPlayed, enemyTracker).then(\n            (result) => {\n\n            }\n        )\n      }\n    )\n  }\n\n  return (\n    <div>\n      <input className='test-button' type=\"text\" onKeyDown={handleKeyDown} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}