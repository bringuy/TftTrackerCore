{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Brian\\\\Desktop\\\\TFTracker\\\\TftTrackerCore\\\\tfttracker-frontend\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport { getSidebarPlayers, updateSidebarPlayers, getEnemyAgainst } from './services/api-calls';\nimport enterKey from './images/enter-key.png';\n\nconst axios = require('axios').default; //serializer should send:\n//ADD LOADER WHEN API IS BEING CALLED\n\n\nconst App = () => {\n  _s();\n\n  const [username, setUsername] = useState('valorantprodigy');\n  const [local_url, setLocal_url] = useState('http://127.0.0.1:8000/');\n  const [isLoading, setIsLoading] = useState(false); //these are variables to get from api calls and to send to other api calls\n\n  const [enemyTracker, setEnemyTracker] = useState([]); //this is returned from updateSidebarPlayers, will use to display 1-4 enemies to watchout for \n\n  const [enemiesToWatch, setEnemiesToWatch] = useState([]); //ALT KEY: GETSIDEBARPLAYERS() INITAL FUNCTION\n  //ENTER KEY: GETENEMYAGAINST() => UPDATESIDEBARPLAYERS\n\n  window.addEventListener('keydown', event => {\n    if (event.key === 'Enter') {\n      console.log('ryan'); //initalizeEnemies()  \n    } else if (event.key === 'Alt') {\n      console.log('rwywawn'); //findAndUpdateEnemy()\n    }\n  });\n\n  const initalizeEnemies = () => {\n    getSidebarPlayers();\n  };\n\n  const findAndUpdateEnemy = () => {\n    axios.get(local_url + 'enemies/gameboard/', {\n      params: JSON.stringify({\n        username: username\n      })\n    }).then(function (response) {\n      console.log(response);\n      let enemyPlayed = response.data.enemyPlayed;\n      axios.get(local_url + 'enemies/update/', {\n        params: JSON.stringify({\n          enemyPlayed: enemyPlayed,\n          enemyTracker: enemyTracker\n        })\n      }).then(function (response) {\n        console.log(response);\n        setEnemyTracker(response.data.playingOrder);\n        setEnemiesToWatch(response.data.enemies);\n      });\n    }).catch(function (error) {\n      // handle error\n      console.log(error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [\n    /*#__PURE__*/\n    //THIS IS TEXT TELLING USER TO PRESS ENTER\n    _jsxDEV(\"div\", {\n      className: \"text-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Press Enter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"enter-key\",\n        src: enterKey\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => initalizeEnemies(),\n        children: \"initalizeEnemies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => findAndUpdateEnemy(),\n        children: \"findAndUpdateEnemy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"warning-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Watch Out For:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"played-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), enemiesToWatch && enemiesToWatch.map(enemy => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: enemy.username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"nbar+LibMZ49fTjyszQ/QMSrKfg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Brian/Desktop/TFTracker/TftTrackerCore/tfttracker-frontend/src/App.js"],"names":["useEffect","useState","getSidebarPlayers","updateSidebarPlayers","getEnemyAgainst","enterKey","axios","require","default","App","username","setUsername","local_url","setLocal_url","isLoading","setIsLoading","enemyTracker","setEnemyTracker","enemiesToWatch","setEnemiesToWatch","window","addEventListener","event","key","console","log","initalizeEnemies","findAndUpdateEnemy","get","params","JSON","stringify","then","response","enemyPlayed","data","playingOrder","enemies","catch","error","map","enemy"],"mappings":"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","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react'\nimport { getSidebarPlayers, updateSidebarPlayers, getEnemyAgainst } from './services/api-calls'\nimport enterKey from './images/enter-key.png'\nconst axios = require('axios').default;\n\n//serializer should send:\n\n//ADD LOADER WHEN API IS BEING CALLED\nconst App = () => {\n\n  const [username, setUsername] = useState('valorantprodigy')\n  const [local_url, setLocal_url] = useState('http://127.0.0.1:8000/')\n\n  const [isLoading, setIsLoading] = useState(false)\n\n  //these are variables to get from api calls and to send to other api calls\n  const [enemyTracker, setEnemyTracker] = useState([])\n  //this is returned from updateSidebarPlayers, will use to display 1-4 enemies to watchout for \n  const [enemiesToWatch, setEnemiesToWatch] = useState([])\n\n\n  //ALT KEY: GETSIDEBARPLAYERS() INITAL FUNCTION\n  //ENTER KEY: GETENEMYAGAINST() => UPDATESIDEBARPLAYERS\n  window.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      console.log('ryan')\n      //initalizeEnemies()  \n    }\n    else if (event.key === 'Alt') {\n      console.log('rwywawn')\n      //findAndUpdateEnemy()\n    }\n  })\n\n  const initalizeEnemies = () => {\n    getSidebarPlayers()\n  }\n\n  const findAndUpdateEnemy = () => {\n    axios.get(local_url + 'enemies/gameboard/', {\n      params: JSON.stringify({\n        username: username,\n      })\n    })\n      .then(function (response) {\n        console.log(response)\n        let enemyPlayed = response.data.enemyPlayed\n        axios.get(local_url + 'enemies/update/', {\n          params: JSON.stringify({\n            enemyPlayed: enemyPlayed,\n            enemyTracker: enemyTracker,\n          })\n        })\n          .then(function (response) {\n            console.log(response);\n            setEnemyTracker(response.data.playingOrder)\n            setEnemiesToWatch(response.data.enemies)\n          })\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      })\n  }\n\n  return (\n    <div className='app-container'>\n      {\n        //THIS IS TEXT TELLING USER TO PRESS ENTER\n        <div className='text-container'>\n          <div>Press Enter</div>\n          <img className='enter-key' src={enterKey} />\n        </div>\n      }\n      <div className = 'button-container'>\n        <button onClick={() => initalizeEnemies()}>initalizeEnemies</button>\n        <button onClick={() => findAndUpdateEnemy()}>findAndUpdateEnemy</button>\n      </div>\n      <div className = 'warning-container'>\n        <div>Watch Out For:</div>\n\n      </div>\n      <div className = 'played-container'>\n\n      </div>\n      {\n        enemiesToWatch && enemiesToWatch.map(enemy => (\n          <div>{enemy.username}</div>\n        ))}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}