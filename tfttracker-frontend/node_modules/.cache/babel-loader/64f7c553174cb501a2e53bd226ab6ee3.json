{"ast":null,"code":"const Promise = require('pinkie-promise');\n\nconst fs = require('fs');\n\nfunction unlinkP(path) {\n  return new Promise((resolve, reject) => {\n    fs.unlink(path, function (err) {\n      if (err) {\n        return reject(err);\n      }\n\n      return resolve();\n    });\n  });\n}\n\nfunction readFileP(path) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, function (err, img) {\n      if (err) {\n        return reject(err);\n      }\n\n      resolve(img);\n    });\n  });\n}\n\nfunction readAndUnlinkP(path) {\n  return new Promise((resolve, reject) => {\n    readFileP(path).then(img => {\n      unlinkP(path).then(() => resolve(img)).catch(reject);\n    }).catch(reject);\n  });\n}\n\nfunction defaultAll(snapshot) {\n  return new Promise((resolve, reject) => {\n    snapshot.listDisplays().then(displays => {\n      const snapsP = displays.map(({\n        id\n      }) => snapshot({\n        screen: id\n      }));\n      Promise.all(snapsP).then(resolve).catch(reject);\n    }).catch(reject);\n  });\n}\n\nmodule.exports = {\n  unlinkP,\n  readFileP,\n  readAndUnlinkP,\n  defaultAll\n};","map":{"version":3,"sources":["C:/Users/Brian/Desktop/TFTracker/TftTrackerCore/tfttracker-frontend/node_modules/screenshot-desktop/lib/utils.js"],"names":["Promise","require","fs","unlinkP","path","resolve","reject","unlink","err","readFileP","readFile","img","readAndUnlinkP","then","catch","defaultAll","snapshot","listDisplays","displays","snapsP","map","id","screen","all","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,gBAAD,CAAvB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AAEA,SAASE,OAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAO,IAAIJ,OAAJ,CAAY,CAACK,OAAD,EAAUC,MAAV,KAAqB;AACtCJ,IAAAA,EAAE,CAACK,MAAH,CAAUH,IAAV,EAAgB,UAAUI,GAAV,EAAe;AAC7B,UAAIA,GAAJ,EAAS;AACP,eAAOF,MAAM,CAACE,GAAD,CAAb;AACD;;AACD,aAAOH,OAAO,EAAd;AACD,KALD;AAMD,GAPM,CAAP;AAQD;;AAED,SAASI,SAAT,CAAoBL,IAApB,EAA0B;AACxB,SAAO,IAAIJ,OAAJ,CAAY,CAACK,OAAD,EAAUC,MAAV,KAAqB;AACtCJ,IAAAA,EAAE,CAACQ,QAAH,CAAYN,IAAZ,EAAkB,UAAUI,GAAV,EAAeG,GAAf,EAAoB;AACpC,UAAIH,GAAJ,EAAS;AACP,eAAOF,MAAM,CAACE,GAAD,CAAb;AACD;;AACDH,MAAAA,OAAO,CAACM,GAAD,CAAP;AACD,KALD;AAMD,GAPM,CAAP;AAQD;;AAED,SAASC,cAAT,CAAyBR,IAAzB,EAA+B;AAC7B,SAAO,IAAIJ,OAAJ,CAAY,CAACK,OAAD,EAAUC,MAAV,KAAqB;AACtCG,IAAAA,SAAS,CAACL,IAAD,CAAT,CACGS,IADH,CACSF,GAAD,IAAS;AACbR,MAAAA,OAAO,CAACC,IAAD,CAAP,CACGS,IADH,CACQ,MAAMR,OAAO,CAACM,GAAD,CADrB,EAEGG,KAFH,CAESR,MAFT;AAGD,KALH,EAMGQ,KANH,CAMSR,MANT;AAOD,GARM,CAAP;AASD;;AAED,SAASS,UAAT,CAAqBC,QAArB,EAA+B;AAC7B,SAAO,IAAIhB,OAAJ,CAAY,CAACK,OAAD,EAAUC,MAAV,KAAqB;AACtCU,IAAAA,QAAQ,CAACC,YAAT,GACGJ,IADH,CACSK,QAAD,IAAc;AAClB,YAAMC,MAAM,GAAGD,QAAQ,CACpBE,GADY,CACR,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAYL,QAAQ,CAAC;AAAEM,QAAAA,MAAM,EAAED;AAAV,OAAD,CADZ,CAAf;AAEArB,MAAAA,OAAO,CAACuB,GAAR,CAAYJ,MAAZ,EACGN,IADH,CACQR,OADR,EAEGS,KAFH,CAESR,MAFT;AAGD,KAPH,EAQGQ,KARH,CAQSR,MART;AASD,GAVM,CAAP;AAWD;;AAEDkB,MAAM,CAACC,OAAP,GAAiB;AACftB,EAAAA,OADe;AAEfM,EAAAA,SAFe;AAGfG,EAAAA,cAHe;AAIfG,EAAAA;AAJe,CAAjB","sourcesContent":["const Promise = require('pinkie-promise')\nconst fs = require('fs')\n\nfunction unlinkP (path) {\n  return new Promise((resolve, reject) => {\n    fs.unlink(path, function (err) {\n      if (err) {\n        return reject(err)\n      }\n      return resolve()\n    })\n  })\n}\n\nfunction readFileP (path) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, function (err, img) {\n      if (err) {\n        return reject(err)\n      }\n      resolve(img)\n    })\n  })\n}\n\nfunction readAndUnlinkP (path) {\n  return new Promise((resolve, reject) => {\n    readFileP(path)\n      .then((img) => {\n        unlinkP(path)\n          .then(() => resolve(img))\n          .catch(reject)\n      })\n      .catch(reject)\n  })\n}\n\nfunction defaultAll (snapshot) {\n  return new Promise((resolve, reject) => {\n    snapshot.listDisplays()\n      .then((displays) => {\n        const snapsP = displays\n          .map(({ id }) => snapshot({ screen: id }))\n        Promise.all(snapsP)\n          .then(resolve)\n          .catch(reject)\n      })\n      .catch(reject)\n  })\n}\n\nmodule.exports = {\n  unlinkP,\n  readFileP,\n  readAndUnlinkP,\n  defaultAll\n}\n"]},"metadata":{},"sourceType":"script"}