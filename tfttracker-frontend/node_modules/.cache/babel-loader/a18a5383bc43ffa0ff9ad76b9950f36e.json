{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Brian\\\\Desktop\\\\TFTracker\\\\TftTrackerCore\\\\tfttracker-frontend\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport { getSidebarPlayers, updateSidebarPlayers, getEnemyAgainst } from './services/api-calls';\nimport { getScreenshot } from './services/screenshot';\nimport screenshot from 'screenshot-desktop';\nimport fs from 'fs'; //serializer should send:\n\nconst App = () => {\n  _s();\n\n  //these are variables to get from api calls and to send to other api calls\n  const [enemyTracker, setEnemyTracker] = useState([]);\n  const [enemyPlayed, setEnemyPlayed] = useState([]); //this is returned from updateSidebarPlayers, will use to display 1-4 enemies to watchout for \n\n  const [enemiesToWatch, setEnemiesToWatch] = useState([]);\n  useEffect(() => {\n    getScreenshot();\n  }, []);\n\n  const handleKeyDown = event => {\n    if (event.key === 'Alt') {\n      screenshot({\n        format: 'png'\n      }).then(img => {\n        // img: Buffer filled with jpg goodness\n        fs.writeFile(`C:/Users/Brian/Desktop/TFTracker/TftTrackerCore/tfttracker-backend/tftproject/screenshot/image.png`, img, () => console.log('ninja moment'));\n      }).catch(err => {\n        console.log(err);\n      }); //getSidebarPlayers().then() //only need to initalize database\n    } else if (event.key === 'Enter') {\n      getScreenshot(); //findAndUpdateEnemy()\n    }\n  };\n\n  const findAndUpdateEnemy = () => {\n    getEnemyAgainst().then(result => {\n      setEnemyTracker(result.enemyTracker);\n      setEnemyPlayed(result.enemyTracker);\n      updateSidebarPlayers(enemyPlayed, enemyTracker).then(result => {});\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"test-button\",\n      type: \"text\",\n      onKeyDown: handleKeyDown\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"ZcSiHe6OJK2RSJdmk1QUgfDgYNE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Brian/Desktop/TFTracker/TftTrackerCore/tfttracker-frontend/src/App.js"],"names":["useEffect","useState","getSidebarPlayers","updateSidebarPlayers","getEnemyAgainst","getScreenshot","screenshot","fs","App","enemyTracker","setEnemyTracker","enemyPlayed","setEnemyPlayed","enemiesToWatch","setEnemiesToWatch","handleKeyDown","event","key","format","then","img","writeFile","console","log","catch","err","findAndUpdateEnemy","result"],"mappings":";;;;;AAAA,OAAO,WAAP;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,iBAAT,EAA4BC,oBAA5B,EAAkDC,eAAlD,QAAyE,sBAAzE;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,EAAP,MAAe,IAAf,C,CAEA;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAEhB;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,EAAD,CAA9C,CAJgB,CAKhB;;AACA,QAAM,CAACY,cAAD,EAAiBC,iBAAjB,IAAsCb,QAAQ,CAAC,EAAD,CAApD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,aAAa;AACd,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMU,aAAa,GAAIC,KAAD,IAAW;AAC/B,QAAIA,KAAK,CAACC,GAAN,KAAc,KAAlB,EAAyB;AACvBX,MAAAA,UAAU,CAAC;AAAEY,QAAAA,MAAM,EAAE;AAAV,OAAD,CAAV,CAA8BC,IAA9B,CAAoCC,GAAD,IAAS;AAC1C;AACAb,QAAAA,EAAE,CAACc,SAAH,CAAc,oGAAd,EAAmHD,GAAnH,EAAwH,MACtHE,OAAO,CAACC,GAAR,CAAY,cAAZ,CADF;AAED,OAJD,EAIGC,KAJH,CAIUC,GAAD,IAAS;AAChBH,QAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACD,OAND,EADuB,CAQvB;AACD,KATD,MAUK,IAAIT,KAAK,CAACC,GAAN,KAAc,OAAlB,EAA2B;AAC9BZ,MAAAA,aAAa,GADiB,CAE9B;AACD;AACF,GAfD;;AAiBA,QAAMqB,kBAAkB,GAAG,MAAM;AAC/BtB,IAAAA,eAAe,GAAGe,IAAlB,CACGQ,MAAD,IAAY;AACVjB,MAAAA,eAAe,CAACiB,MAAM,CAAClB,YAAR,CAAf;AACAG,MAAAA,cAAc,CAACe,MAAM,CAAClB,YAAR,CAAd;AACAN,MAAAA,oBAAoB,CAACQ,WAAD,EAAcF,YAAd,CAApB,CAAgDU,IAAhD,CACGQ,MAAD,IAAY,CAEX,CAHH;AAKD,KATH;AAWD,GAZD;;AAcA,sBACE;AAAA,2BACE;AAAO,MAAA,SAAS,EAAC,aAAjB;AAA+B,MAAA,IAAI,EAAC,MAApC;AAA2C,MAAA,SAAS,EAAEZ;AAAtD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAhDD;;GAAMP,G;;KAAAA,G;AAkDN,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react'\nimport { getSidebarPlayers, updateSidebarPlayers, getEnemyAgainst } from './services/api-calls'\nimport { getScreenshot } from './services/screenshot'\nimport screenshot from 'screenshot-desktop'\nimport fs from 'fs'\n\n//serializer should send:\n\nconst App = () => {\n\n  //these are variables to get from api calls and to send to other api calls\n  const [enemyTracker, setEnemyTracker] = useState([])\n  const [enemyPlayed, setEnemyPlayed] = useState([])\n  //this is returned from updateSidebarPlayers, will use to display 1-4 enemies to watchout for \n  const [enemiesToWatch, setEnemiesToWatch] = useState([])\n\n  useEffect(() => {\n    getScreenshot()\n  }, [])\n\n  const handleKeyDown = (event) => {\n    if (event.key === 'Alt') {\n      screenshot({ format: 'png' }).then((img) => {\n        // img: Buffer filled with jpg goodness\n        fs.writeFile(`C:/Users/Brian/Desktop/TFTracker/TftTrackerCore/tfttracker-backend/tftproject/screenshot/image.png`, img, () =>\n          console.log('ninja moment'));\n      }).catch((err) => {\n        console.log(err)\n      })\n      //getSidebarPlayers().then() //only need to initalize database\n    }\n    else if (event.key === 'Enter') {\n      getScreenshot()\n      //findAndUpdateEnemy()\n    }\n  }\n\n  const findAndUpdateEnemy = () => {\n    getEnemyAgainst().then(\n      (result) => {\n        setEnemyTracker(result.enemyTracker)\n        setEnemyPlayed(result.enemyTracker)\n        updateSidebarPlayers(enemyPlayed, enemyTracker).then(\n          (result) => {\n\n          }\n        )\n      }\n    )\n  }\n\n  return (\n    <div>\n      <input className='test-button' type=\"text\" onKeyDown={handleKeyDown} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}